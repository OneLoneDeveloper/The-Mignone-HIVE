
    <header class="mb-4 text-center">
      <h1 class="mb-3">üìê Area & Perimeter Playground</h1>
      <p class="lead max-width-900 mx-auto">Drag the corner handle, use the sliders, or type values to change the rectangle. Watch the <strong>area</strong> and <strong>perimeter</strong> update live. Great for teaching how dimensions affect both!</p>
    </header>

    <div class="row g-4">
      <!-- Controls -->
      <div class="col-12 col-lg-4">
        <div class="card shadow-sm border-blue">
          <div class="card-body">
            <h2 class="h5 mb-3">Controls</h2>

            <div class="mb-3">
              <label for="unit" class="form-label">Units</label>
              <select id="unit" class="form-select">
                <option value="cm">Centimeters (cm)</option>
                <option value="in">Inches (in)</option>
                <option value="m">Meters (m)</option>
              </select>
            </div>

            <div class="row g-3 align-items-center mb-2">
              <div class="col-12">
                <label for="widthRange" class="form-label">Width (<span id="widthLabel">8</span>)</label>
                <input type="range" class="form-range" min="1" max="20" step="0.1" id="widthRange" value="8">
              </div>
              <div class="col-6">
                <input type="number" class="form-control" id="widthInput" min="1" max="20" step="0.1" value="8" aria-label="Width numeric input">
              </div>
            </div>

            <div class="row g-3 align-items-center mb-2">
              <div class="col-12">
                <label for="heightRange" class="form-label">Height (<span id="heightLabel">5</span>)</label>
                <input type="range" class="form-range" min="1" max="20" step="0.1" id="heightRange" value="5">
              </div>
              <div class="col-6">
                <input type="number" class="form-control" id="heightInput" min="1" max="20" step="0.1" value="5" aria-label="Height numeric input">
              </div>
            </div>

            <div class="mb-3">
              <label for="scaleRange" class="form-label">Drawing Scale (pixels per unit): <span id="scaleLabel">40</span></label>
              <input type="range" class="form-range" min="10" max="60" step="1" id="scaleRange" value="40">
            </div>

            <div class="form-check form-switch mb-2">
              <input class="form-check-input" type="checkbox" role="switch" id="gridToggle" checked>
              <label class="form-check-label" for="gridToggle">Show unit grid</label>
            </div>

            <div class="d-flex gap-2 mt-3">
              <button id="resetBtn" class="btn btn-outline-primary">Reset</button>
              <button id="randomBtn" class="btn btn-outline-secondary">Randomize</button>
            </div>
          </div>
        </div>

        <div class="card mt-4 shadow-sm border-green">
          <div class="card-body">
            <h2 class="h5 mb-3">Formulas</h2>
            <p class="mb-2">Perimeter <code>P = 2( w + h )</code></p>
            <p class="mb-0">Area <code>A = w √ó h</code></p>
          </div>
        </div>

        <div class="card mt-4 shadow-sm border-yellow">
          <div class="card-body">
            <h2 class="h5 mb-3">Live Values</h2>
            <ul class="list-unstyled mb-0">
              <li class="mb-1">Width: <strong><span id="wVal">8</span></strong> <span id="unitLabelW">cm</span></li>
              <li class="mb-1">Height: <strong><span id="hVal">5</span></strong> <span id="unitLabelH">cm</span></li>
              <li class="mb-1">Perimeter: <strong><span id="pVal">26</span></strong> <span id="unitLabelP">cm</span></li>
              <li class="mb-1">Area: <strong><span id="aVal">40</span></strong> <span id="unitLabelA">cm¬≤</span></li>
            </ul>
            <div class="visually-hidden" aria-live="polite" id="srLive">Width 8, Height 5, Perimeter 26 centimeters, Area 40 square centimeters</div>
          </div>
        </div>
      </div>

      <!-- Canvas / Visualizer -->
      <div class="col-12 col-lg-8">
        <div class="card shadow-sm border-purple">
          <div class="card-body">
            <h2 class="h5 mb-3">Visualizer (drag the round handle)</h2>
            <div class="w-100" id="vizWrap">
              <svg id="board" width="100%" height="460" viewBox="0 0 900 460" xmlns="http://www.w3.org/2000/svg" style="background: rgba(255,255,255,0.6); border: 1px solid rgba(0,0,0,.1); border-radius: 0.5rem; touch-action: none;">
                <!-- margins -->
                <g id="scene" transform="translate(60,40)">
                  <!-- grid -->
                  <g id="grid"></g>

                  <!-- rectangle -->
                  <rect id="rect" x="0" y="0" width="320" height="200" rx="4" ry="4" 
                        style="fill: var(--green-translucent); stroke: var(--green-dark); stroke-width: 2;"></rect>

                  <!-- dimension labels -->
                  <text id="labelW" x="160" y="-10" text-anchor="middle" style="font-family: var(--font-secondary); fill: var(--dark-grey); font-size: 14px;">w = 8</text>
                  <text id="labelH" x="330" y="100" style="font-family: var(--font-secondary); fill: var(--dark-grey); font-size: 14px;">h = 5</text>

                  <!-- drag handle (bottom-right) -->
                  <circle id="handle" cx="320" cy="200" r="8" 
                          style="fill: var(--purple); stroke: var(--purple-dark); stroke-width: 2; cursor: nwse-resize;" />
                </g>
              </svg>
            </div>
            <p class="text-muted small mb-0 mt-2">Tip: You can also tweak values with the arrow keys when a slider is focused.</p>
          </div>
        </div>
      </div>
    </div>

    <section class="mt-5 max-width-900 mx-auto">
      <h2 class="h5 mb-3">How to use this in class</h2>
      <ol class="mb-0">
        <li>Ask: ‚ÄúIf I double the width but keep the height, what happens to area and perimeter?‚Äù</li>
        <li>Drag the handle to demonstrate. Have students predict before revealing the numbers.</li>
        <li>Switch units to connect math to real-world measurements.</li>
        <li>Toggle the unit grid to visualize square units for area.</li>
      </ol>
    </section>






  <script>
    (function() {
      const state = {
        unit: 'cm',
        w: 8,
        h: 5,
        scale: 40,
        dragging: false,
      };

      // Elements
      const unitSel = document.getElementById('unit');
      const wRange = document.getElementById('widthRange');
      const wInput = document.getElementById('widthInput');
      const hRange = document.getElementById('heightRange');
      const hInput = document.getElementById('heightInput');
      const scaleRange = document.getElementById('scaleRange');
      const gridToggle = document.getElementById('gridToggle');

      const widthLabel = document.getElementById('widthLabel');
      const heightLabel = document.getElementById('heightLabel');

      const wVal = document.getElementById('wVal');
      const hVal = document.getElementById('hVal');
      const pVal = document.getElementById('pVal');
      const aVal = document.getElementById('aVal');

      const unitLabelW = document.getElementById('unitLabelW');
      const unitLabelH = document.getElementById('unitLabelH');
      const unitLabelP = document.getElementById('unitLabelP');
      const unitLabelA = document.getElementById('unitLabelA');

      const srLive = document.getElementById('srLive');

      const svg = document.getElementById('board');
      const scene = document.getElementById('scene');
      const rect = document.getElementById('rect');
      const handle = document.getElementById('handle');
      const labelW = document.getElementById('labelW');
      const labelH = document.getElementById('labelH');
      const gridG = document.getElementById('grid');

      // Margins inside the scene transform
      const margin = { left: 60, top: 40 };

      function clamp(val, min, max) { return Math.max(min, Math.min(max, val)); }

      function updateLabels() {
        widthLabel.textContent = state.w;
        heightLabel.textContent = state.h;

        wVal.textContent = state.w;
        hVal.textContent = state.h;

        const P = +(2 * (state.w + state.h)).toFixed(2);
        const A = +(state.w * state.h).toFixed(2);

        pVal.textContent = P;
        aVal.textContent = A;

        const unit = state.unit;
        unitLabelW.textContent = unit;
        unitLabelH.textContent = unit;
        unitLabelP.textContent = unit;
        unitLabelA.textContent = unit + '\u00B2';

        labelW.textContent = `w = ${state.w}`;
        labelH.textContent = `h = ${state.h}`;

        srLive.textContent = `Width ${state.w}, Height ${state.h}, Perimeter ${P} ${unit}, Area ${A} square ${unit}`;
      }

      function drawGrid() {
        gridG.innerHTML = '';
        if (!gridToggle.checked) return;

        const sx = state.scale;
        const sy = state.scale;
        const wpx = state.w * sx;
        const hpx = state.h * sy;

        for (let x = 0; x <= wpx; x += sx) {
          const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
          line.setAttribute('x1', x);
          line.setAttribute('y1', 0);
          line.setAttribute('x2', x);
          line.setAttribute('y2', hpx);
          line.setAttribute('style', 'stroke: #d8d8d8; stroke-width: 1;');
          gridG.appendChild(line);
        }
        for (let y = 0; y <= hpx; y += sy) {
          const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
          line.setAttribute('x1', 0);
          line.setAttribute('y1', y);
          line.setAttribute('x2', wpx);
          line.setAttribute('y2', y);
          line.setAttribute('style', 'stroke: #d8d8d8; stroke-width: 1;');
          gridG.appendChild(line);
        }
      }

      function render() {
        const sx = state.scale;
        const wpx = state.w * sx;
        const hpx = state.h * sx;

        rect.setAttribute('width', wpx);
        rect.setAttribute('height', hpx);

        handle.setAttribute('cx', wpx);
        handle.setAttribute('cy', hpx);

        labelW.setAttribute('x', wpx / 2);
        labelH.setAttribute('x', wpx + 10);
        labelH.setAttribute('y', hpx / 2);

        drawGrid();
        updateLabels();
      }

      function setWidth(val) {
        const v = clamp(parseFloat(val) || 0, parseFloat(wRange.min), parseFloat(wRange.max));
        state.w = +v.toFixed(2);
        wRange.value = state.w;
        wInput.value = state.w;
        render();
      }
      function setHeight(val) {
        const v = clamp(parseFloat(val) || 0, parseFloat(hRange.min), parseFloat(hRange.max));
        state.h = +v.toFixed(2);
        hRange.value = state.h;
        hInput.value = state.h;
        render();
      }
      function setScale(val) {
        const v = clamp(parseFloat(val) || 0, parseFloat(scaleRange.min), parseFloat(scaleRange.max));
        state.scale = Math.round(v);
        scaleRange.value = state.scale;
        document.getElementById('scaleLabel').textContent = state.scale;
        render();
      }

      // Events
      unitSel.addEventListener('change', () => { state.unit = unitSel.value; render(); });
      wRange.addEventListener('input', e => setWidth(e.target.value));
      wInput.addEventListener('input', e => setWidth(e.target.value));
      hRange.addEventListener('input', e => setHeight(e.target.value));
      hInput.addEventListener('input', e => setHeight(e.target.value));
      scaleRange.addEventListener('input', e => setScale(e.target.value));
      gridToggle.addEventListener('change', render);

      document.getElementById('resetBtn').addEventListener('click', () => {
        unitSel.value = 'cm';
        state.unit = 'cm';
        setWidth(8);
        setHeight(5);
        setScale(40);
        gridToggle.checked = true;
        render();
      });
      document.getElementById('randomBtn').addEventListener('click', () => {
        const w = (Math.random() * 19 + 1).toFixed(1);
        const h = (Math.random() * 19 + 1).toFixed(1);
        setWidth(w);
        setHeight(h);
      });

      // Dragging logic for the handle
      let dragging = false;
      function toLocalPoint(evt) {
        const pt = svg.createSVGPoint();
        pt.x = evt.clientX; pt.y = evt.clientY;
        const ctm = scene.getScreenCTM().inverse();
        const local = pt.matrixTransform(ctm);
        return { x: local.x, y: local.y };
      }
      handle.addEventListener('pointerdown', (e) => {
        dragging = true;
        handle.setPointerCapture(e.pointerId);
      });
      svg.addEventListener('pointermove', (e) => {
        if (!dragging) return;
        const local = toLocalPoint(e);
        const sx = state.scale;
        const wUnits = clamp(local.x / sx, parseFloat(wRange.min), parseFloat(wRange.max));
        const hUnits = clamp(local.y / sx, parseFloat(hRange.min), parseFloat(hRange.max));
        setWidth(wUnits);
        setHeight(hUnits);
      });
      document.addEventListener('pointerup', () => { dragging = false; });

      // Init
      render();
    })();
  </script>