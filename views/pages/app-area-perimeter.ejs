<section class="py-10 px-3 px-sm-4 px-md-5">
  <div class="mb-4 text-center">
    <h1 class="mb-3">Area & Perimeter Relationship</h1>
    <p class="lead mx-auto" style="max-width:900px">
      Use the sliders/fields or drag the knobs on the rectangle. Lock perimeter or area to see how dimensions respond.
    </p>
  </div>

  <div class="row g-4">
    <!-- LEFT: Controls -->
    <div class="col-12 col-lg-4">
      <div class="card shadow-sm">
        <div class="card-body">
          <h2 class="h5 mb-3">Controls</h2>

          <!-- Width -->
          <div class="mb-3">
            <label class="form-label" for="widthRange">Width (cm)</label>
            <input id="widthRange" type="range" class="form-range" min="1" max="20" step="0.1" value="8">
            <input id="widthInput" type="number" class="form-control mt-2" min="1" max="20" step="0.1" value="8" aria-label="Width in centimeters">
          </div>

          <!-- Height -->
          <div class="mb-3">
            <label class="form-label" for="heightRange">Height (cm)</label>
            <input id="heightRange" type="range" class="form-range" min="1" max="20" step="0.1" value="5">
            <input id="heightInput" type="number" class="form-control mt-2" min="1" max="20" step="0.1" value="5" aria-label="Height in centimeters">
          </div>

          <!-- Locks -->
          <div class="form-check mb-2">
            <input class="form-check-input" type="checkbox" id="lockPerimeter">
            <label class="form-check-label" for="lockPerimeter">Lock perimeter</label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="lockArea">
            <label class="form-check-label" for="lockArea">Lock area</label>
          </div>
        </div>
      </div>
    </div>

    <!-- RIGHT: Visualizer -->
    <div class="col-12 col-lg-8">
      <div class="card shadow-sm">
        <div class="card-body">
          <h2 class="h5 mb-3">Visualizer</h2>
          <div class="w-100">
            <svg id="board" width="100%" height="480" viewBox="0 0 900 480" xmlns="http://www.w3.org/2000/svg"
                 style="background: rgba(255,255,255,0.6); border: 1px solid rgba(0,0,0,.1); border-radius: .5rem; touch-action: none;">
              <g id="scene" transform="translate(60,40)">
                <!-- Rectangle -->
                <rect id="rect" x="0" y="0" width="320" height="200" rx="4" ry="4"
                      style="fill: rgba(25,135,84,.15); stroke:#198754; stroke-width:2;"></rect>

                <!-- Knobs -->
                <!-- Right-edge width knob (upright rectangle) -->
                <rect id="handleW" x="320" y="80" width="10" height="40" rx="2" ry="2" style="fill:#0d6efd; cursor:ew-resize;"></rect>
                <!-- Bottom-edge height knob (horizontal rectangle) -->
                <rect id="handleH" x="140" y="200" width="40" height="10" rx="2" ry="2" style="fill:#0d6efd; cursor:ns-resize;"></rect>
                <!-- Corner knob (little L corner) -->
                <path id="handleCorner" d="M 304 200 L 320 200 L 320 184" style="stroke:#6f42c1; stroke-width:4; fill:none; cursor:nwse-resize; stroke-linecap:round;"></path>
              </g>
            </svg>

            <div class="row text-nowrap">
              <div class="col-6 col-lg-3">
                <div>
                  <span>Width = </span>
                  <span id="labelW">8 cm</span>
                </div>
              </div>
              <div class="col-6 col-lg-3">
                <div>
                  <span>Height = </span>
                  <span id="labelH">5 cm</span>
                </div>
              </div>
              <div class="col-6 col-lg-3">
                <div>
                  <span>Perimeter = </span>
                  <span id="labelPerimeter">26 cm</span>
                </div>
              </div>
              <div class="col-6 col-lg-3">
                <div>
                  <span>Area = </span>
                  <span id="labelArea">40 cm²</span>
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
</section>


<script>
(function () {
  // ---------- Tweakable constants ----------
  const MIN_W = 0.1;     // cm
  const MIN_H = 0.1;     // cm
  const MAX_W = 20;    // cm
  const MAX_H = 20;    // cm
  const SCALE = 20;    // px per cm

  // ---------- State ----------
  const state = {
    w: 8,
    h: 5,
    lockedPerimeter: 2 * (8 + 5),
    lockedArea: 8 * 5,
    constraint: 'none' // 'none' | 'perimeter' | 'area'
  };

  // Keep the bottom edge stationary at the initial bottom position:
  let BOTTOM_PX = MAX_H * SCALE;


  // ---------- Elements ----------
  const wRange = document.getElementById('widthRange');
  const wInput = document.getElementById('widthInput');
  const hRange = document.getElementById('heightRange');
  const hInput = document.getElementById('heightInput');
  const lockP = document.getElementById('lockPerimeter');
  const lockA = document.getElementById('lockArea');

  const svg   = document.getElementById('board');
  const scene = document.getElementById('scene');
  const rect  = document.getElementById('rect');
  const labelW = document.getElementById('labelW');
  const labelH = document.getElementById('labelH');
  const labelArea = document.getElementById('labelArea');
  const labelPerimeter = document.getElementById('labelPerimeter');

  const handleW = document.getElementById('handleW');
  const handleH = document.getElementById('handleH');
  const handleCorner = document.getElementById('handleCorner');

  // Set ranges (so UI mirrors constants)
  [wRange, wInput].forEach(el => { el.min = MIN_W; el.max = MAX_W; el.step = 0.1; el.value = state.w; });
  [hRange, hInput].forEach(el => { el.min = MIN_H; el.max = MAX_H; el.step = 0.1; el.value = state.h; });

  // ---------- Helpers ----------
  const clamp = (v, min, max) => Math.max(min, Math.min(max, v));

  function updateLabels() {
    const P = +(2 * (state.w + state.h)).toFixed(2);
    const A = +(state.w * state.h).toFixed(2);
    labelW.textContent = `${state.w} cm`;
    labelH.textContent = `${state.h} cm`;
    labelArea.textContent = `${A} cm²`;
    labelPerimeter.textContent = `${P} cm`;
  }

  function render() {
    const wpx = state.w * SCALE;
    const hpx = state.h * SCALE;

    // Top edge moves; bottom is fixed at BOTTOM_PX
    const yTop = BOTTOM_PX - hpx;

    // Rectangle
    rect.setAttribute('x', 0);
    rect.setAttribute('y', yTop);
    rect.setAttribute('width', wpx);
    rect.setAttribute('height', hpx);

    // Knobs
    // right-edge knob (upright): centered vertically on the rect
    handleW.setAttribute('x', wpx);
    handleW.setAttribute('y', yTop + hpx / 2 - 20);

    // top-edge knob (horizontal): sits on the moving top
    handleH.setAttribute('x', wpx / 2 - 20);
    handleH.setAttribute('y', yTop - 5);                 // straddles the top edge

    // corner knob (little L) at top-right
    handleCorner.setAttribute('d', `M ${wpx - 16} ${yTop} L ${wpx} ${yTop} L ${wpx} ${yTop + 16}`);

    updateLabels();
  }


  function respectConstraint(changed) {
    // changed: 'w' | 'h' | 'both'
    if (state.constraint === 'perimeter') {
      const half = state.lockedPerimeter / 2; // w + h must equal this
      if (changed === 'w' || changed === 'both') {
        let h = +(half - state.w).toFixed(2);
        h = clamp(h, MIN_H, MAX_H);
        let w = +(half - h).toFixed(2);
        w = clamp(w, MIN_W, MAX_W);
        state.h = +(half - w).toFixed(2);
        state.w = +w.toFixed(2);
      } else { // changed === 'h'
        let w = +(half - state.h).toFixed(2);
        w = clamp(w, MIN_W, MAX_W);
        let h = +(half - w).toFixed(2);
        h = clamp(h, MIN_H, MAX_H);
        state.w = +(half - h).toFixed(2);
        state.h = +h.toFixed(2);
      }
    } else if (state.constraint === 'area') {
      const A = state.lockedArea;
      if (changed === 'w' || changed === 'both') {
        let h = +(A / state.w).toFixed(2);
        h = clamp(h, MIN_H, MAX_H);
        let w = +(A / h).toFixed(2);
        w = clamp(w, MIN_W, MAX_W);
        state.h = +(A / w).toFixed(2);
        state.w = +w.toFixed(2);
      } else { // changed === 'h'
        let w = +(A / state.h).toFixed(2);
        w = clamp(w, MIN_W, MAX_W);
        let h = +(A / w).toFixed(2);
        h = clamp(h, MIN_H, MAX_H);
        state.w = +(A / h).toFixed(2);
        state.h = +h.toFixed(2);
      }
    }
  }

  function syncInputs() {
    wRange.value = state.w; wInput.value = state.w;
    hRange.value = state.h; hInput.value = state.h;
  }

  function setWidth(val, changedBy='w') {
    state.w = +clamp(parseFloat(val) || 0, MIN_W, MAX_W).toFixed(2);
    if (state.constraint !== 'none') respectConstraint(changedBy);
    syncInputs(); render();
  }
  function setHeight(val, changedBy='h') {
    state.h = +clamp(parseFloat(val) || 0, MIN_H, MAX_H).toFixed(2);
    if (state.constraint !== 'none') respectConstraint(changedBy);
    syncInputs(); render();
  }

  // ---------- Events: sliders & fields (kept perfectly in sync) ----------
  wRange.addEventListener('input', e => setWidth(e.target.value, 'w'));
  wInput.addEventListener('input', e => setWidth(e.target.value, 'w'));
  hRange.addEventListener('input', e => setHeight(e.target.value, 'h'));
  hInput.addEventListener('input', e => setHeight(e.target.value, 'h'));

  // Locks (mutually exclusive behavior with checkboxes)
  lockP.addEventListener('change', () => {
    if (lockP.checked) { lockA.checked = false; state.constraint = 'perimeter'; state.lockedPerimeter = +(2 * (state.w + state.h)).toFixed(2); }
    else if (!lockA.checked) state.constraint = 'none';
    render();
  });
  lockA.addEventListener('change', () => {
    if (lockA.checked) { lockP.checked = false; state.constraint = 'area'; state.lockedArea = +(state.w * state.h).toFixed(2); }
    else if (!lockP.checked) state.constraint = 'none';
    render();
  });

  // ---------- Dragging (knobs) ----------
  let dragMode = null; // 'w' | 'h' | 'both'

  function toLocalPoint(evt) {
    const pt = svg.createSVGPoint();
    pt.x = evt.clientX; pt.y = evt.clientY;
    const local = pt.matrixTransform(scene.getScreenCTM().inverse());
    return { x: local.x, y: local.y };
  }
  function startDrag(mode, e) { dragMode = mode; e.target.setPointerCapture && e.target.setPointerCapture(e.pointerId); }
  function moveDrag(e) {
    if (!dragMode) return;
    const p = toLocalPoint(e);

    // Width still measured from left = 0 → right moves
    if (dragMode === 'w') {
      setWidth(p.x / SCALE, 'w');
    } else if (dragMode === 'h') {
      // Height measured from fixed bottom → top moves
      setHeight((BOTTOM_PX - p.y) / SCALE, 'h');
    } else {
      // Corner: both at once (right + top)
      setWidth(p.x / SCALE, 'both');
      setHeight((BOTTOM_PX - p.y) / SCALE, 'both');
    }
  }

  function endDrag() { dragMode = null; }

  handleW.addEventListener('pointerdown', e => startDrag('w', e));
  handleH.addEventListener('pointerdown', e => startDrag('h', e));
  handleCorner.addEventListener('pointerdown', e => startDrag('both', e));
  svg.addEventListener('pointermove', moveDrag);
  document.addEventListener('pointerup', endDrag);

  // ---------- Init ----------
  syncInputs(); render();
})();
</script>
