<!-- General Inquiry -->
<form class="needs-validation" novalidate data-contact-form action="/api/contact" method="post">
  <input type="hidden" name="formType" value="general" />
  <input type="hidden" name="ts" value="<%= Date.now() %>" />
  <!-- Honeypot (keep it hidden for users) -->
  <div class="visually-hidden">
    <label>Company</label>
    <input type="text" name="company" tabindex="-1" autocomplete="off">
  </div>

  <div class="mb-3">
    <label class="form-label">Full name</label>
    <input class="form-control" name="name" required>
    <div class="invalid-feedback">Please enter your name.</div>
  </div>

  <div class="mb-3">
    <label class="form-label">Email</label>
    <input class="form-control" type="email" name="email" required>
    <div class="invalid-feedback">A valid email is required.</div>
  </div>

  <div class="mb-3">
    <label class="form-label">Message</label>
    <textarea class="form-control" name="message" rows="4" required></textarea>
    <div class="invalid-feedback">Please add a message.</div>
  </div>

  <div class="alert alert-success d-none" role="alert" data-success>Thanks! We’ll be in touch shortly.</div>
  <div class="alert alert-danger d-none" role="alert" data-error>Hmm, something went wrong. Please try again.</div>

  <button class="btn btn-primary" type="submit">
    Send
    <span class="spinner-border spinner-border-sm align-middle ms-2 d-none" aria-hidden="true" data-spinner></span>
  </button>
</form>

<!-- Program Signup (different fields, same endpoint) -->
<form class="needs-validation mt-5" novalidate data-contact-form action="/api/contact" method="post">
  <input type="hidden" name="formType" value="program-signup" />
  <input type="hidden" name="ts" value="<%= Date.now() %>" />
  <div class="visually-hidden">
    <label>Company</label>
    <input type="text" name="company" tabindex="-1" autocomplete="off">
  </div>

  <div class="row g-3">
    <div class="col-md-6">
      <label class="form-label">Parent/Guardian Name</label>
      <input class="form-control" name="name" required>
      <div class="invalid-feedback">Required.</div>
    </div>
    <div class="col-md-6">
      <label class="form-label">Email</label>
      <input class="form-control" type="email" name="email" required>
      <div class="invalid-feedback">Valid email required.</div>
    </div>
    <div class="col-md-6">
      <label class="form-label">Learner Name</label>
      <input class="form-control" name="learnerName" required>
      <div class="invalid-feedback">Required.</div>
    </div>
    <div class="col-md-6">
      <label class="form-label">Age</label>
      <input class="form-control" type="number" min="1" name="age" required>
      <div class="invalid-feedback">Required.</div>
    </div>
  </div>

  <div class="mb-3 mt-3">
    <label class="form-label">Anything we should know?</label>
    <textarea class="form-control" name="message" rows="3"></textarea>
  </div>

  <div class="alert alert-success d-none" role="alert" data-success>Thanks! We’ll confirm details by email.</div>
  <div class="alert alert-danger d-none" role="alert" data-error>Couldn’t send right now. Please try again.</div>

  <button class="btn btn-primary" type="submit">
    Request Signup
    <span class="spinner-border spinner-border-sm align-middle ms-2 d-none" aria-hidden="true" data-spinner></span>
  </button>
</form>


<script>
(() => {
  // Bootstrap validation + fetch submit (works for any form with data-contact-form)
  const forms = document.querySelectorAll('form[data-contact-form]');
  forms.forEach(form => {
    form.addEventListener('submit', async (e) => {
      // Client-side validation
      if (!form.checkValidity()) {
        e.preventDefault();
        e.stopPropagation();
        form.classList.add('was-validated');
        return;
      }

      // JS-enhanced submit
      e.preventDefault();

      const btn = form.querySelector('[type="submit"]');
      const spinner = form.querySelector('[data-spinner]');
      const okAlert = form.querySelector('[data-success]');
      const errAlert = form.querySelector('[data-error]');

      btn?.setAttribute('disabled', 'disabled');
      spinner?.classList.remove('d-none');
      okAlert?.classList.add('d-none');
      errAlert?.classList.add('d-none');

      // Convert to x-www-form-urlencoded so Express can parse without extra libs
      const fd = new FormData(form);
      // Refresh timestamp at submit time (simple anti-bot timing)
      fd.set('ts', Date.now().toString());
      const body = new URLSearchParams(fd);

      try {
        const res = await fetch(form.action, {
          method: 'POST',
          headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' },
          body
        });
        const data = await res.json();

        if (res.ok && data.ok) {
          okAlert?.classList.remove('d-none');
          form.reset();
          form.classList.remove('was-validated');
        } else {
          errAlert?.classList.remove('d-none');
        }
      } catch {
        errAlert?.classList.remove('d-none');
      } finally {
        btn?.removeAttribute('disabled');
        spinner?.classList.add('d-none');
      }
    }, false);
  });
})();
</script>
